generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Coin {
  id                  Int       @id @default(autoincrement())
  symbol              String    @unique @db.VarChar(20)
  name                String?   @db.VarChar(100)
  isActive            Boolean   @default(true) @map("is_active")
  minOiThreshold      Decimal?  @default(100000) @map("min_oi_threshold") @db.Decimal(20, 2)
  coingeckoId         String?   @map("coingecko_id") @db.VarChar(100)
  lastMarketUpdate    DateTime? @map("last_market_update") @db.Timestamptz()
  createdAt           DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt           DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz()

  fundingRates        FundingRate[]
  coinMarkets         CoinMarket[]
  positions           Position[]

  @@map("coins")
}

model FundingRate {
  id                  BigInt    @id @default(autoincrement())
  coinId              Int?      @map("coin_id")
  coin                String    @db.VarChar(20)
  hyperliquidOi       Decimal?  @map("hyperliquid_oi") @db.Decimal(20, 2)
  hyperliquidRate     Decimal?  @map("hyperliquid_rate") @db.Decimal(10, 8)
  binanceRate         Decimal?  @map("binance_rate") @db.Decimal(10, 8)
  bybitRate           Decimal?  @map("bybit_rate") @db.Decimal(10, 8)
  binanceHlArb        Decimal?  @map("binance_hl_arb") @db.Decimal(10, 8)
  bybitHlArb          Decimal?  @map("bybit_hl_arb") @db.Decimal(10, 8)
  scrapedAt           DateTime  @default(dbgenerated("(now() AT TIME ZONE 'America/Sao_Paulo'::text)")) @map("scraped_at") @db.Timestamptz()
  scrapedAtBr         DateTime? @default(dbgenerated("(now() AT TIME ZONE 'America/Sao_Paulo'::text)")) @map("scraped_at_br") @db.Timestamptz()
  createdAt           DateTime  @default(now()) @map("created_at") @db.Timestamptz()

  coinRelation        Coin?     @relation(fields: [coinId], references: [id], onDelete: Cascade)

  @@index([coin, scrapedAt])
  @@index([scrapedAt])
  @@map("funding_rates")
}

model ScrapingMetadata {
  id                  Int       @id @default(autoincrement())
  totalCoins          Int?      @map("total_coins")
  successfulCoins     Int?      @map("successful_coins")
  failedCoins         Int?      @default(0) @map("failed_coins")
  sourceUrl           String?   @db.Text
  timePeriod          String?   @db.VarChar(50)
  scrapingDurationMs  Int?      @map("scraping_duration_ms")
  errorMessage        String?   @map("error_message") @db.Text
  status              String?   @default("success") @db.VarChar(20)
  scrapedAt           DateTime  @map("scraped_at") @db.Timestamptz()
  createdAt           DateTime  @default(now()) @map("created_at") @db.Timestamptz()

  @@map("scraping_metadata")
}

model ArbitrageAlert {
  id                  Int       @id @default(autoincrement())
  coin                String    @db.VarChar(20)
  exchange            String    @db.VarChar(50)
  arbitrageValue      Decimal?  @map("arbitrage_value") @db.Decimal(10, 8)
  oiValue             Decimal?  @map("oi_value") @db.Decimal(20, 2)
  alertType           String?   @map("alert_type") @db.VarChar(50)
  thresholdCrossed    Decimal?  @map("threshold_crossed") @db.Decimal(10, 8)
  isNotified          Boolean   @default(false) @map("is_notified")
  notifiedAt          DateTime? @map("notified_at") @db.Timestamptz()
  detectedAt          DateTime  @map("detected_at") @db.Timestamptz()
  createdAt           DateTime  @default(now()) @map("created_at") @db.Timestamptz()

  @@map("arbitrage_alerts")
}

model CoinMarket {
  id                  Int       @id @default(autoincrement())
  coinId              Int?      @map("coin_id")
  exchange1           String?   @map("exchange_1") @db.VarChar(50)
  exchange1Pair       String?   @map("exchange_1_pair") @db.VarChar(50)
  exchange1VolumeUsd  Decimal?  @map("exchange_1_volume_usd") @db.Decimal(20, 2)
  exchange1TrustScore String?   @map("exchange_1_trust_score") @db.VarChar(20)
  exchange2           String?   @map("exchange_2") @db.VarChar(50)
  exchange2Pair       String?   @map("exchange_2_pair") @db.VarChar(50)
  exchange2VolumeUsd  Decimal?  @map("exchange_2_volume_usd") @db.Decimal(20, 2)
  exchange2TrustScore String?   @map("exchange_2_trust_score") @db.VarChar(20)
  totalVolume24h      Decimal?  @map("total_volume_24h") @db.Decimal(20, 2)
  marketCap           Decimal?  @map("market_cap") @db.Decimal(20, 2)
  priceUsd            Decimal?  @map("price_usd") @db.Decimal(20, 8)
  totalMarkets        Int?      @map("total_markets")
  lastUpdated         DateTime  @default(now()) @map("last_updated") @db.Timestamptz()
  createdAt           DateTime  @default(now()) @map("created_at") @db.Timestamptz()

  coin                Coin?     @relation(fields: [coinId], references: [id], onDelete: Cascade)

  @@map("coin_markets")
}

model SystemConfig {
  id          Int      @id @default(autoincrement())
  configKey   String   @unique @map("config_key") @db.VarChar(100)
  configValue Json     @map("config_value")
  description String?  @db.Text
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz()

  @@map("system_config")
}

model Position {
  id                    String    @id @default(cuid())
  userId                String?   @map("user_id") @db.VarChar(100)
  coinId                Int       @map("coin_id")
  coinSymbol            String    @map("coin_symbol") @db.VarChar(20)
  status                String    @default("open") @db.VarChar(20)

  totalCapital          Decimal   @map("total_capital") @db.Decimal(20, 2)

  shortAmount           Decimal   @map("short_amount") @db.Decimal(20, 2)
  shortExchange         String    @default("Hyperliquid") @map("short_exchange") @db.VarChar(50)
  shortEntryPrice       Decimal   @map("short_entry_price") @db.Decimal(20, 8)
  shortSize             Decimal   @map("short_size") @db.Decimal(20, 8)
  shortEntryFundingRate Decimal   @map("short_entry_funding_rate") @db.Decimal(10, 8)
  shortExitPrice        Decimal?  @map("short_exit_price") @db.Decimal(20, 8)

  spotAmount            Decimal   @map("spot_amount") @db.Decimal(20, 2)
  spotExchange          String    @map("spot_exchange") @db.VarChar(50)
  spotEntryPrice        Decimal   @map("spot_entry_price") @db.Decimal(20, 8)
  spotQuantity          Decimal   @map("spot_quantity") @db.Decimal(20, 8)
  spotExitPrice         Decimal?  @map("spot_exit_price") @db.Decimal(20, 8)

  tradingFees           Decimal   @default(0) @map("trading_fees") @db.Decimal(20, 2)
  closingFees           Decimal?  @map("closing_fees") @db.Decimal(20, 2)

  fundingAccumulated    Decimal   @default(0) @map("funding_accumulated") @db.Decimal(20, 8)
  pnlNet                Decimal   @default(0) @map("pnl_net") @db.Decimal(20, 8)
  pnlPercentage         Decimal   @default(0) @map("pnl_percentage") @db.Decimal(10, 4)

  openedAt              DateTime  @map("opened_at") @db.Timestamptz()
  closedAt              DateTime? @map("closed_at") @db.Timestamptz()
  createdAt             DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt             DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz()

  notes                 String?   @db.Text

  coin                  Coin      @relation(fields: [coinId], references: [id])
  snapshots             PositionSnapshot[]
  alerts                PositionAlert[]

  @@index([userId, status])
  @@index([coinSymbol, status])
  @@index([openedAt])
  @@map("positions")
}

model PositionSnapshot {
  id                    String    @id @default(cuid())
  positionId            String    @map("position_id")

  currentFundingRate    Decimal   @map("current_funding_rate") @db.Decimal(10, 8)
  fundingAccumulated    Decimal   @map("funding_accumulated") @db.Decimal(20, 8)

  spotPrice             Decimal?  @map("spot_price") @db.Decimal(20, 8)
  perpPrice             Decimal?  @map("perp_price") @db.Decimal(20, 8)

  pnlFunding            Decimal   @map("pnl_funding") @db.Decimal(20, 8)
  pnlNet                Decimal   @map("pnl_net") @db.Decimal(20, 8)

  snapshotAt            DateTime  @map("snapshot_at") @db.Timestamptz()
  createdAt             DateTime  @default(now()) @map("created_at") @db.Timestamptz()

  position              Position  @relation(fields: [positionId], references: [id], onDelete: Cascade)

  @@index([positionId, snapshotAt])
  @@map("position_snapshots")
}

model PositionAlert {
  id                    String    @id @default(cuid())
  positionId            String    @map("position_id")

  alertType             String    @map("alert_type") @db.VarChar(50)

  thresholdValue        Decimal?  @map("threshold_value") @db.Decimal(20, 8)

  isActive              Boolean   @default(true) @map("is_active")
  isAcknowledged        Boolean   @default(false) @map("is_acknowledged")

  currentValue          Decimal?  @map("current_value") @db.Decimal(20, 8)
  message               String?   @db.Text

  triggeredAt           DateTime? @map("triggered_at") @db.Timestamptz()
  acknowledgedAt        DateTime? @map("acknowledged_at") @db.Timestamptz()
  createdAt             DateTime  @default(now()) @map("created_at") @db.Timestamptz()

  position              Position  @relation(fields: [positionId], references: [id], onDelete: Cascade)

  @@index([positionId, isActive])
  @@index([triggeredAt])
  @@map("position_alerts")
}

model UserSettings {
  id                      String    @id @default(cuid())
  userId                  String    @unique @map("user_id") @db.VarChar(100)

  minFundingRate          Decimal   @default(0.001) @map("min_funding_rate") @db.Decimal(10, 8)
  minOi                   Decimal   @default(100000) @map("min_oi") @db.Decimal(20, 2)

  alertFundingNegative    Boolean   @default(true) @map("alert_funding_negative")
  alertFundingDropPercent Decimal   @default(50) @map("alert_funding_drop_percent") @db.Decimal(5, 2)
  alertProfitTarget       Decimal?  @map("alert_profit_target") @db.Decimal(20, 2)

  preferredExchanges      Json      @default("[]") @map("preferred_exchanges")

  enableWebPush           Boolean   @default(false) @map("enable_web_push")
  notifyOnOpen            Boolean   @default(true) @map("notify_on_open")
  notifyCriticalAlerts    Boolean   @default(true) @map("notify_critical_alerts")

  theme                   String    @default("dark") @db.VarChar(20)
  currency                String    @default("USD") @db.VarChar(10)

  createdAt               DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt               DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz()

  @@map("user_settings")
}