import { createClient } from '@supabase/supabase-js'
import { config } from 'dotenv'

config()

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL || ''
const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY || ''

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Vari√°veis de ambiente n√£o configuradas!')
  console.error('NEXT_PUBLIC_SUPABASE_URL:', supabaseUrl ? '‚úì' : '‚úó')
  console.error('NEXT_PUBLIC_SUPABASE_ANON_KEY:', supabaseKey ? '‚úì' : '‚úó')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseKey)

async function checkDatabase() {
  console.log('üîç Verificando conex√£o com Supabase...\n')

  const { data: coins, error: coinsError } = await supabase
    .from('coins')
    .select('id, symbol, name')
    .limit(5)

  if (coinsError) {
    console.error('‚ùå Erro ao buscar coins:', coinsError)
  } else {
    console.log(`‚úÖ Coins: ${coins?.length || 0} registros encontrados`)
    console.log(coins)
  }

  const { data: fundingRates, error: frError } = await supabase
    .from('funding_rates')
    .select('coin, hyperliquid_rate, scraped_at')
    .order('scraped_at', { ascending: false })
    .limit(5)

  if (frError) {
    console.error('‚ùå Erro ao buscar funding_rates:', frError)
  } else {
    console.log(`\n‚úÖ Funding Rates: ${fundingRates?.length || 0} registros recentes`)
    console.log(fundingRates)
  }

  const { data: positions, error: posError } = await supabase
    .from('positions')
    .select('*')
    .limit(5)

  if (posError) {
    console.error('‚ùå Erro ao buscar positions:', posError)
  } else {
    console.log(`\n‚úÖ Positions: ${positions?.length || 0} registros`)
    console.log(positions)
  }

  console.log('\n‚úÖ Verifica√ß√£o conclu√≠da!')
}

checkDatabase().catch(console.error)